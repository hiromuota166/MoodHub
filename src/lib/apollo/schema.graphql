input CreateRoom {
  userId: String!
  roomName: String!
}

input JoinRoom {
  userId: String!
  roomId: Int!
}

type Mutation {
  createRoom(room: CreateRoom!): Room!
  joinRoom(join: JoinRoom!): Room!
  register(regist: Register!): RegisterComplete!
  updateCategory(update: UpdateCategories!): RegisterComplete!
  updateUsername(update: UpdateUserName!): RegisterComplete!
}

type Query {
  song(roomId: Int!): [Song!]!
  getUserInfo(userId: String!): RegisterComplete!
  getMembers(roomId: Int!): RoomMembers!
}

input Register {
  userId: String!
  categories: [String!] = null
  userName: String = null
  gender: String = null
  age: Int = null
  avatarUrl: String = null
}

type RegisterComplete {
  userId: String!
  categories: [String!]
  userName: String
  gender: String
  age: Int
  avatarUrl: String
}

type Room {
  roomId: Int!
  userId: [String!]!
  name: String!
}

type RoomMembers {
  roomName: String!
  membersInfoList: [UserDict!]!
}

type Song {
  songName: String!
  categories: [String!]!
  trackId: String!
}

input UpdateCategories {
  userId: String!
  categories: [String!]!
}

input UpdateUserName {
  userId: String!
  userName: String = null
}

type UserDict {
  userId: String!
  avatarUrl: String
}